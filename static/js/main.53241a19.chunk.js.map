{"version":3,"sources":["Components/Recipe.jsx","Components/Hooks/HTTP.jsx","Components/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","recipe","className","label","ingredients","map","ingredient","index","key","text","calories","src","image","alt","useHTTP","url","useState","data","setData","isLoading","setIsLoading","useEffect","a","fetch","response","json","hits","fetchData","Menu","search","setSearch","query","setQuery","LINK","recipes","action","onSubmit","event","preventDefault","console","log","type","value","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAkBeA,G,MAfA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKC,UAAU,UACb,4BAAKD,EAAOE,OACZ,4BACGF,EAAOG,YAAYC,KAAI,SAACC,EAAYC,GAAb,OACtB,wBAAIC,IAAKD,GAAQD,EAAWG,UAGhC,wCAAcR,EAAOS,SAArB,SACA,yBAAKC,IAAKV,EAAOW,MAAOC,IAAI,Q,uBCOnBC,EAlBC,SAACC,GAAS,IAAD,EACCC,mBAAS,IADV,mBAChBC,EADgB,KACVC,EADU,OAEWF,mBAAS,MAFpB,mBAEhBG,EAFgB,KAELC,EAFK,KAevB,OAXAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBF,GAAa,GADG,SAEOG,MAAMR,GAFb,cAEVS,EAFU,gBAGGA,EAASC,OAHZ,OAGVR,EAHU,OAIhBC,EAAQD,EAAKS,MACbN,GAAa,GALG,2CAAH,qDAOfO,KACC,CAACZ,IAEG,CAACE,EAAME,ICgCDS,G,MA5CF,WACX,IADiB,EAIWZ,mBAAS,IAJpB,mBAIVa,EAJU,KAIFC,EAJE,OAKSd,mBAAS,WALlB,mBAKVe,EALU,KAKHC,EALG,KAOXC,EAAI,0CAAsCF,EAAtC,mBANK,WAML,oBALM,oCAFC,EAQYjB,EAAQmB,GARpB,mBAQVC,EARU,KAQDf,EARC,KAqBjB,OACE,yBAAKjB,UAAU,QACb,0BAAMiC,OAAO,SAASjC,UAAU,cAAckC,SAb7B,SAACC,GACpBA,EAAMC,iBACNN,EAASH,GACTC,EAAU,IACVS,QAAQC,IAAIT,KAUR,2BACEU,KAAK,OACLvC,UAAU,aACVwC,MAAOb,EACPc,SAXY,SAACN,GACnBP,EAAUO,EAAMO,OAAOF,UAYnB,4BAAQD,KAAK,SAASvC,UAAU,iBAAhC,WAIDiB,GAAa,0CACd,yBAAKjB,UAAU,aACZgC,EAAQ7B,KAAI,SAACJ,EAAQM,GAAT,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAON,OAAQA,EAAOA,gBC9B9B4C,EARH,WACV,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.53241a19.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipe.css';\r\n\r\nconst Recipe = ({ recipe }) => {\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h1>{recipe.label}</h1>\r\n      <ol>\r\n        {recipe.ingredients.map((ingredient, index) => (\r\n          <li key={index}>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>Calories: {recipe.calories} cals</p>\r\n      <img src={recipe.image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useHTTP = (url) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setData(data.hits);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return [data, isLoading];\r\n};\r\n\r\nexport default useHTTP;\r\n","import React, { useState } from 'react';\r\nimport Recipe from './Recipe';\r\nimport useHTTP from './Hooks/HTTP';\r\nimport './Menu.css';\r\n\r\nconst Menu = () => {\r\n  const APP_ID = '4dcc17cf';\r\n  const APP_KEY = '3588c4e00e03c289473113ddeb6e641b';\r\n\r\n  const [search, setSearch] = useState('');\r\n  const [query, setQuery] = useState('chicken');\r\n\r\n  const LINK = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\r\n  const [recipes, isLoading] = useHTTP(LINK);\r\n\r\n  const hanldeSubmit = (event) => {\r\n    event.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n    console.log(query);\r\n  };\r\n\r\n  const handleChage = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <form action=\"submit\" className=\"search-form\" onSubmit={hanldeSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-bar\"\r\n          value={search}\r\n          onChange={handleChage}\r\n        />\r\n        <button type=\"submit\" className=\"search-button\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      {isLoading && <h1>Loading...</h1>}\r\n      <div className=\"menu-list\">\r\n        {recipes.map((recipe, index) => (\r\n          <Recipe key={index} recipe={recipe.recipe} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\nimport './App.css';\nimport Menu from './Components/Menu';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Menu />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}